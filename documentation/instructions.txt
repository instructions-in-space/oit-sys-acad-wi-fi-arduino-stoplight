Basic Instructions
--------------------------------------------------------------------------------
Get Ready to Develop
.  Take out one of the Arduino Wemos D1 boards.
.  Plug the Arduino Wemos D1 board into your computer using a USB-C cable.
.  Open the "Arduino IDE" program. 
.  If Arduino IDE says "X No board selected" in the lower right corner, click 
the "Select Board" dropdown menu (upper left).  
.  Choose the following: 
	---------------------
	Unknown 
	/dev/cu.usbserial-110
	---------------------
.  Under "BOARDS", search for "wemos".
.  Choose the "LOLIN(WEMOS) D1 R2 & mini" one (the "/dev/cu.usbserial-110 
Serial Port (USB)" one should be selected automatically).  
.  Click the "OK" button.
.  It should now show something like this in the bottom left corner:
	indexing: 24/85
(with a little circling icon to the left); when it's done, this will disappear).
--------------------------------------------------------------------------------
Hello World!
.  Basic code (the beginning of a "Sketch") looks like this:
	void setup() {
	  // put your setup code here, to run once:

	}

	void loop() {
	  // put your main code here, to run repeatedly:

	}
.  Here is an example:
	/*
	  Blink

	  Turns an LED on for one second, then off for one second, repeatedly.

	  Most Arduinos have an on-board LED you can control. On the UNO, MEGA and ZERO
	  it is attached to digital pin 13, on MKR1000 on pin 6. LED_BUILTIN is set to
	  the correct LED pin independent of which board is used.
	  If you want to know what pin the on-board LED is connected to on your Arduino
	  model, check the Technical Specs of your board at:
	  https://www.arduino.cc/en/Main/Products

	  modified 8 May 2014
	  by Scott Fitzgerald
	  modified 2 Sep 2016
	  by Arturo Guadalupi
	  modified 8 Sep 2016
	  by Colby Newman

	  This example code is in the public domain.

	  https://www.arduino.cc/en/Tutorial/BuiltInExamples/Blink
	*/

	// the setup function runs once when you press reset or power the board
	void setup() {
	  // initialize digital pin LED_BUILTIN as an output.
	  pinMode(LED_BUILTIN, OUTPUT);
	}

	// the loop function runs over and over again forever
	void loop() {
	  digitalWrite(LED_BUILTIN, HIGH);  // turn the LED on (HIGH is the voltage level)
	  delay(1000);                      // wait for a second
	  digitalWrite(LED_BUILTIN, LOW);   // turn the LED off by making the voltage LOW
	  delay(1000);                      // wait for a second
	}
Paste the code into the Arduino IDE.
.  Click the check mark button in the upper left corner.  The IDE should then compile it
and put something like the following into the "Output" pane below:
	. Variables and constants in RAM (global, static), used 28104 / 80192 bytes (35%)
	║   SEGMENT  BYTES    DESCRIPTION
	╠══ DATA     1496     initialized variables
	╠══ RODATA   920      constants       
	╚══ BSS      25688    zeroed variables
	. Instruction RAM (IRAM_ATTR, ICACHE_RAM_ATTR), used 59667 / 65536 bytes (91%)
	║   SEGMENT  BYTES    DESCRIPTION
	╠══ ICACHE   32768    reserved space for flash instruction cache
	╚══ IRAM     26899    code in IRAM    
	. Code in flash (default, ICACHE_FLASH_ATTR), used 232148 / 1048576 bytes (22%)
	║   SEGMENT  BYTES    DESCRIPTION
	╚══ IROM     232148   code in flash   
.  Click the button with an arrow pointing the right right (also in the upper left corner);
this causes the newly compiled code to be transferred to the Arduino board through the
USB-C cable.  It will recompile and then upload the binary code showing something like the
following in the "Output" pane:
	. Variables and constants in RAM (global, static), used 28104 / 80192 bytes (35%)
	║   SEGMENT  BYTES    DESCRIPTION
	╠══ DATA     1496     initialized variables
	╠══ RODATA   920      constants       
	╚══ BSS      25688    zeroed variables
	. Instruction RAM (IRAM_ATTR, ICACHE_RAM_ATTR), used 59667 / 65536 bytes (91%)
	║   SEGMENT  BYTES    DESCRIPTION
	╠══ ICACHE   32768    reserved space for flash instruction cache
	╚══ IRAM     26899    code in IRAM    
	. Code in flash (default, ICACHE_FLASH_ATTR), used 232148 / 1048576 bytes (22%)
	║   SEGMENT  BYTES    DESCRIPTION
	╚══ IROM     232148   code in flash   
	esptool.py v3.0
	Serial port /dev/cu.usbserial-110
	Connecting....
	Chip is ESP8266EX
	Features: WiFi
	Crystal is 26MHz
	MAC: 4c:11:ae:13:ad:4a
	Uploading stub...
	Running stub...
	Stub running...
	Changing baud rate to 460800
	Changed.
	Configuring flash size...
	Auto-detected Flash size: 4MB
	Compressed 265616 bytes to 195725...
	Writing at 0x00000000... (8 %)
	Writing at 0x00004000... (16 %)
	Writing at 0x00008000... (25 %)
	Writing at 0x0000c000... (33 %)
	Writing at 0x00010000... (41 %)
	Writing at 0x00014000... (50 %)
	Writing at 0x00018000... (58 %)
	Writing at 0x0001c000... (66 %)
	Writing at 0x00020000... (75 %)
	Writing at 0x00024000... (83 %)
	Writing at 0x00028000... (91 %)
	Writing at 0x0002c000... (100 %)
	Wrote 265616 bytes (195725 compressed) at 0x00000000 in 5.0 seconds (effective 422.0 kbit/s)...
	Hash of data verified.

	Leaving...
	Hard resetting via RTS pin...
You should now see a blue light flashing on the Arduino board.  This is the result of the compiled
code that was uploaded to the board.  The blue light will now flash if the board is connected to 
power even if it's not connected to your computer (i.e., all your computer did was upload the program
to the Arduino, and the Arduino can now run the code on its own).

Source:  https://docs.arduino.cc/built-in-examples/basics/Blink/
See also:  
	https://siytek.com/guide-to-the-wemos-d1-mini/  (***This is important because it has pinouts, etc.***)
	https://www.wemos.cc/en/latest/
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

--------------------------------------------------------------------------------


